name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name: Run Tests & Linting
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies and linters
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      # --- НОВИЙ КРОК ЛІНТИНГУ та ПЕРЕВІРКИ ФОРМАТУВАННЯ ---
      - name: Code Linting and Formatting Check
        working-directory: ./src/delivery_service
        run: |
          echo "Перевірка форматування за допомогою Black"
          # Запуск black у режимі перевірки (dry-run), щоб не змінювати файли
          black . --check --diff
          
          echo "Перевірка сортування імпортів за допомогою isort"
          # Запуск isort у режимі перевірки
          isort . --check-only --diff

          echo "Лінтинг коду за допомогою Flake8 (використовуючи pyproject.toml)"
          # Flake8 автоматично знайде конфігурацію та застосує всі розширення
          flake8 . --statistics
      # --- КІНЕЦЬ КРОКУ ЛІНТИНГУ ---

      - name: Run Django Tests
        working-directory: ./src/delivery_service
        env:
          DJANGO_SETTINGS_MODULE: app.settings
          SECRET_KEY: test-secret-key-for-ci
          DB_NAME: postgres
          DB_USER: root
          DB_PASSWORD: root
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          python manage.py test --settings=app.settings

      - name: Check Django migrations
        working-directory: ./src/delivery_service
        env:
          DJANGO_SETTINGS_MODULE: app.settings
          SECRET_KEY: test-secret-key-for-ci
          DB_NAME: postgres
          DB_USER: root
          DB_PASSWORD: root
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          python manage.py makemigrations --check --dry-run --no-input


  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Generate OpenAPI Schema
        working-directory: ./src/delivery_service
        env:
          DJANGO_SETTINGS_MODULE: app.settings
          SECRET_KEY: test-secret-key-for-ci
          DB_NAME: postgres
          DB_USER: root
          DB_PASSWORD: root
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          python manage.py spectacular --color --file ../../openapi-generated.yaml

      - name: Prepare documentation build
        run: |
          mkdir -p build/api
          cp -r docs/* build/ || true
          cp openapi-generated.yaml build/api/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: build/


  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
