name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django

    - name: Lint with flake8
      working-directory: ./src/delivery-service
      run: |
        # Зупинити збірку якщо є синтаксичні помилки або невизначені імена
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Попередження про складність коду (не зупиняє збірку)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Django Tests
      working-directory: ./src/delivery-service
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DJANGO_SETTINGS_MODULE: delivery-service.settings
        SECRET_KEY: test-secret-key-for-ci
      run: |
        python manage.py test

    - name: Check Django migrations
      working-directory: ./src/delivery-service
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DJANGO_SETTINGS_MODULE: delivery-service.settings
        SECRET_KEY: test-secret-key-for-ci
      run: |
        python manage.py makemigrations --check --dry-run --no-input

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate OpenAPI Schema
      working-directory: ./src/delivery-service
      env:
        DJANGO_SETTINGS_MODULE: delivery-service.settings
        SECRET_KEY: test-secret-key-for-ci
      run: |
        python manage.py spectacular --color --file ../../openapi-generated.yaml

    - name: Copy docs to build directory
      run: |
        mkdir -p build
        cp -r docs/* build/
        cp openapi-generated.yaml build/api/

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: build/

  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: ./docs-build
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs-build
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

      