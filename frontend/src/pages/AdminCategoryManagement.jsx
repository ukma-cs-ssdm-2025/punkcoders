import React, { useState } from 'react';

const initialCategories = [
  { 
    id: 1, 
    name: '–ü—ñ—Ü–∞',
    emoji: 'üçï'
  },
  { 
    id: 2, 
    name: '–ù–∞–ø–æ—ó',
    emoji: 'ü•§'
  },
  { 
    id: 3, 
    name: '–°–æ—É—Å–∏',
    emoji: 'üßÇ'
  },
];

const defaultFormState = {
  id: null,
  name: '',
  emoji: 'üçï'
};

function AdminCategoryManagement() {

  const [categories, setCategories] = useState(initialCategories);
  
  const [formData, setFormData] = useState(defaultFormState);
  
  const [editingId, setEditingId] = useState(null);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (editingId) {
      setCategories(prevItems => 
        prevItems.map(item => 
          item.id === editingId ? { ...formData, id: editingId } : item
        )
      );
    } else {
      const newItem = {
        ...formData,
        id: Date.now()
      };
      setCategories(prevItems => [newItem, ...prevItems]);
    }
    
    clearForm();
  };

  const handleEdit = (item) => {
    setEditingId(item.id);
    setFormData(item);
  };

  const handleDelete = (id) => {
    if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?')) {
      setCategories(prevItems => prevItems.filter(item => item.id !== id));
    }
  };

  const clearForm = () => {
    setFormData(defaultFormState);
    setEditingId(null);
  };
  
  return (
    <div>
      <h2>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</h2>
      
      <form className="admin-form" onSubmit={handleSubmit}>
        <h3>{editingId ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' : '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'}</h3>
        <div className="form-grid">
          
          <div className="form-group">
            <label htmlFor="name">–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="emoji">–ï–º–æ–¥–∂—ñ</label>
            <input
              type="text"
              id="emoji"
              name="emoji"
              value={formData.emoji}
              onChange={handleInputChange}
              placeholder="üçï"
              maxLength="2"
            />
          </div>

        </div>
        
        <div className="actions" style={{ marginTop: '1rem' }}>
          <button type="submit" className="admin-button">
            {editingId ? '–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏' : '–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'}
          </button>
          {editingId && (
            <button 
              type="button" 
              className="admin-button admin-button-secondary" 
              onClick={clearForm}
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            </button>
          )}
        </div>
      </form>
      
      <h3>–ù–∞—è–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</h3>
      <table className="admin-table">
        <thead>
          <tr>
            <th>–ï–º–æ–¥–∂—ñ</th>
            <th>–ù–∞–∑–≤–∞</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          {categories.map(item => (
            <tr key={item.id}>
              <td style={{ fontSize: '1.5rem' }}>{item.emoji}</td>
              <td>{item.name}</td>
              <td className="actions">
                <button className="admin-button" onClick={() => handleEdit(item)}>
                  –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
                <button className="admin-button admin-button-secondary" onClick={() => handleDelete(item.id)}>
                  –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminCategoryManagement;